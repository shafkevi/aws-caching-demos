---
AWSTemplateFormatVersion: "2010-09-09"

Description: "**WARNING** You will be billed for the AWS resources used if you create a stack from this template"

Metadata:
  About:
    Description: "AWS Caching Demos - Infrastructure"
  Author:
    Description: "Stuart Fox"

Parameters:
  GoogleAPIKey:
    Type: String
  UseHostedZone:
    Type: String
  HostedZone:
    Type: String
  WebsiteName:
    Type: String
  DomainName:
    Type: String
  Vpc:
    Type: String
  DBInstanceType:
    Type: String
  DBUser:
    Type: String
  PrivSubnet1:
    Type: String
  PrivSubnet2:
    Type: String
  CacheInstanceType:
    Type: String
  DAXInstanceType:
    Type: String
  PubSubnet1:
    Type: String
  PubSubnet2:
    Type: String
  DockerRepo:
    Type: String
  MinContainers:
    Type: Number
  MaxContainers:
    Type: Number
  AutoScalingTargetValue:
    Type: Number

Conditions:
  UseHostedZone:
    !Equals [Yes, !Ref UseHostedZone]
  
Resources:
## Secrets Manager Config Section
  DatabaseRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for my RDS instance'
      Name: !Sub "/${AWS::StackName}/rds/connection_string"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUser}","GoogleAPIKey":"${GoogleAPIKey}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
        
  SecretsManagerAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-SMAccess"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: secretsmanager:GetSecretValue
          Resource: 
          - !Ref DatabaseRotationSecret
      Roles:
        - !Ref ECSTaskRole

  SecretRDSInstanceAttachment1:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseRotationSecret
      TargetId: !Ref DatabaseCluster
      TargetType: AWS::RDS::DBCluster

  ## Aurora Config Section
  EnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-RDSMonitoringRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: monitoring.rds.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Path: "/"
    
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Database Security Group"
      GroupName: !Sub "${AWS::StackName}-RDSSG"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Aurora Subnet Group"
      DBSubnetGroupName: !Sub "${AWS::StackName}-rdsubnetgroup"
      SubnetIds:
      - Ref: PrivSubnet1
      - Ref: PrivSubnet2

  DatabaseCluster:
    DependsOn: DatabaseSubnetGroup
    DeletionPolicy: Delete
    Type: "AWS::RDS::DBCluster"
    Properties: 
      DatabaseName: employees
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBClusterParameterGroupName: default.aurora-mysql5.7
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: aurora-mysql
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseRotationSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseRotationSecret, ':SecretString:password}}' ]]
      EnableCloudwatchLogsExports: 
        - "error"
        - "general"
        - "slowquery"
        - "audit"

  DatabaseInstance1:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: aurora-mysql
      PubliclyAccessible: false
      
  DatabaseInstance2:
    Type: "AWS::RDS::DBInstance" 
    Properties:
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: aurora-mysql
      PubliclyAccessible: false

  ## ElastiCache Config Section
  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ElastiCache Security Group"
      GroupName: !Sub "${AWS::StackName}-CacheSG"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "ElastiCache Subnet Group"
      CacheSubnetGroupName: !Sub "${AWS::StackName}-CacheSubnetGroup"
      SubnetIds:
      - Ref: PrivSubnet1
      - Ref: PrivSubnet2

  CacheCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: true
      AutoMinorVersionUpgrade: true
      CacheNodeType: !Ref CacheInstanceType
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Engine: redis
      EngineVersion: '5.0.6'
      NumNodeGroups: '4'
      ReplicasPerNodeGroup: '1'
      Port: 6379
      ReplicationGroupDescription: Replication Group
      SecurityGroupIds:
      - !Ref CacheSecurityGroup

  ## DynamoDB Config Section
  SensorLocationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-sensorLocation"
      KeySchema:
        - 
          AttributeName: sensorName
          KeyType: "HASH"
      AttributeDefinitions:
        - 
          AttributeName: "sensorName"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST

  SensorDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-sensorData"
      KeySchema:
        - AttributeName: sensorName
          KeyType: "HASH"
        - AttributeName: timestamp
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "sensorName"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      BillingMode: PAY_PER_REQUEST

  DynamodbTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-DynamoAccess"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: dynamodb:*
          Resource: 
          - !GetAtt SensorLocationTable.Arn
          - !GetAtt SensorDataTable.Arn
      Roles:
        - !Ref DAXRole
        - !Ref ECSTaskRole

  ## DAX Config Section
  DAXSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DAX Security Group"
      GroupName: !Sub "${AWS::StackName}-DaxSG"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8111
          ToPort: 8111
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  DAXSubnetGroup:
    Type: AWS::DAX::SubnetGroup
    Properties:
      Description: "DAX subnet group"
      SubnetGroupName: !Sub "${AWS::StackName}-DaxSubnetgroup"  
      SubnetIds:
        - !Ref PrivSubnet1
        - !Ref PrivSubnet2

  DAXParamGroup:
    Type: AWS::DAX::ParameterGroup
    Properties:
      Description: "DAX parameter group"
      ParameterGroupName: !Sub "${AWS::StackName}-DaxParameterGroup"  
      ParameterNameValues:
         "query-ttl-millis" : "75000"
         "record-ttl-millis" : "88000"

  DAXRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-DemoDaxRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - dax.amazonaws.com

  DAXAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-DAXAccess"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - dax:*
          Resource:
            - !GetAtt DAXCluster.Arn
      Roles:
        - !Ref ECSTaskRole
  
  DAXCluster:
    Type: AWS::DAX::Cluster
    Properties:
      Description: "DAX Cluster"
      IAMRoleARN: !GetAtt DAXRole.Arn
      NodeType: !Ref DAXInstanceType
      ReplicationFactor: 2
      ParameterGroupName: !Ref DAXParamGroup
      SecurityGroupIds:
        - !GetAtt DAXSecurityGroup.GroupId
      SubnetGroupName: !Ref DAXSubnetGroup

  ## ACM Cert Config Section
  ALBCertificate:
    Condition: UseHostedZone
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '${WebsiteName}.${DomainName}'
      ValidationMethod: DNS

  ## LoadBalancer (ALB) Config Section
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB Security Group"
      GroupName: !Sub "${AWS::StackName}-ALBSg"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-ALB"
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 300
      Scheme: internet-facing
      Subnets: 
        - !Ref PubSubnet1
        - !Ref PubSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
    
  LoadBalancerListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref 'DefaultTargetGroup'
          Type: 'forward'

  LoadBalancerListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: UseHostedZone
    Properties:
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ALBCertificate
      DefaultActions:
        - TargetGroupArn: !Ref 'DefaultTargetGroup'
          Type: 'forward'

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-DefaultTG"
      VpcId: !Ref 'Vpc'
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TG"
      VpcId: !Ref Vpc
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 45
      HealthyThresholdCount: 2
      TargetType: ip

  ListenerRule80:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener80
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      
  ListenerRule443:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: UseHostedZone
    Properties:
      ListenerArn: !Ref LoadBalancerListener443
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ## Route53 Config Section
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: UseHostedZone
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Join [".", [!Ref WebsiteName, !Ref DomainName]]
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

  ## CloudWatch Config Section
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-LogGroup"
      RetentionInDays: 365

  ## S3 Config Section
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  #X-Ray Config Section
  XRayAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-XRayAccess"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - xray:GetSamplingRules
            - xray:GetSamplingTargets
            - xray:PutTraceSegments
          Resource: 
          - "*"
      Roles:
        - !Ref ECSTaskRole

  ## ECS Config Section
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ECSTaskRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com
        
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Access to the Fargate containers"
      GroupName: !Sub "${AWS::StackName}-FargateSG"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref 'ALBSecurityGroup'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-ECSCluster"

  ECSTaskDefinition:
    DependsOn:
      - ECSTaskRole
      - CloudWatchLogsGroup
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      TaskRoleArn: { "Fn::GetAtt": ["ECSTaskRole", "Arn"] }
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Sub "${AWS::StackName}-TaskDef"
      NetworkMode: "awsvpc"
      Cpu: 512
      Memory: 1GB
      ContainerDefinitions:
      - Name: !Sub "webapp"
        Image: !Sub "${DockerRepo}:latest"
        PortMappings:
        - ContainerPort: 5000
          Protocol: tcp
        EntryPoint: 
          - "/src/boot.sh"
        LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub "${AWS::StackName}-LogStream"
        Environment:
          - Name: SENSORLOCATION_TABLE
            Value: !Sub "${AWS::StackName}-sensorLocation"
          - Name: SENSORDATA_TABLE
            Value: !Sub "${AWS::StackName}-sensorData"
          - Name: CACHE_HOST
            Value: { "Fn::GetAtt": ["CacheCluster","ConfigurationEndPoint.Address"]}
          - Name: DAX_HOST
            Value: { "Fn::GetAtt": ["DAXCluster", "ClusterDiscoveryEndpoint"] }
          - Name: S3_BUCKET
            Value: !Ref S3Bucket
          - Name: STACK_NAME
            Value: !Sub "${AWS::StackName}"
          - Name: REGION
            Value: !Sub "${AWS::Region}"
          - Name: SECRETS_MANAGER_PATH
            Value: !Sub "/${AWS::StackName}/rds/connection_string"

  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - LoadBalancerListener80
    Properties:
      Cluster: !GetAtt ['ECSCluster', 'Arn']
      ServiceName: !Sub "${AWS::StackName}-ECSService"
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: !Ref MinContainers
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      HealthCheckGracePeriodSeconds: 10
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivSubnet1
            - !Ref PrivSubnet2
      LoadBalancers:
      - ContainerName: "webapp"
        ContainerPort: 5000
        TargetGroupArn: !Ref TargetGroup
    
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-AutoScalingRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref 'ECSCluster', !GetAtt ECSService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-AutoScalingPolicy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 20
        ScaleOutCooldown: 5
        TargetValue: !Ref AutoScalingTargetValue